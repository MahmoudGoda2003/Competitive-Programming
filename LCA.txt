
int n , ancestor[N][M], lvl[N];
vector < int > g[N];
 
void dfs( int node , int par)
{
    lvl[node] = lvl[par] + 1;
    ancestor[node][0] = par;
    for ( int j = 1 ; j < M ; j++)
    {
        int p = ancestor[node][j-1];
        ancestor[node][j] = ancestor[p][j-1];
    }
    for(auto ch : g[node])
    {
        if(ch == par)
            continue;
        dfs(ch,node);
    }
}


int findKthAncestor( int u , int k)		//return zero if k > depth --> call dfs(1,0) in main
{
    for ( int j = M-1 ; j >= 0 ; j--)
        if(k&(1<<j))
            u = ancestor[u][j];
    return u;
}


int getLCA( int u , int v)
{
    if(lvl[u] < lvl[v])
        swap(u,v);
    u = findKthAncestor(u,lvl[u]-lvl[v]);
    if ( u == v)
        return u;
    for ( int i = M-1 ; i>= 0 ;i--)
    {
        if(ancestor[u][i] == ancestor[v][i])
            continue;
        u = ancestor[u][i];
        v = ancestor[v][i];
    }
    return ancestor[u][0];
}
bool comp(ll a,ll b){
    return lvl[a]>lvl[b];
}
ll getDist(ll u,ll v){
    ll lca= getLCA(u,v);
    return lvl[u]+lvl[v]-2*lvl[lca];
}
// LCA &Sparse table to get max 

int n , ancestor[N][M], lvl[N],sp[N][M];
vector < pair<int,int> > g[N];

void dfs( int node , int par,int cost)
{
    lvl[node] = lvl[par] + 1;
    ancestor[node][0] = par;
    sp[node][0]=cost;
    for ( int j = 1 ; j < M ; j++)
    {
        int p = ancestor[node][j-1];
        ancestor[node][j] = ancestor[p][j-1];
        sp[node][j] = max(sp[node][j-1], sp[p][j-1]);
    }
    for(auto ch : g[node])
    {
        if(ch.F == par)
            continue;
        dfs(ch.F,node,ch.S);
    }
}
int findKthAncestor( int u , int k)
{
    for ( int j = M-1 ; j >= 0 ; j--)
        if(k&(1<<j))
            u = ancestor[u][j];
    return u;
}
int getLCA( int u , int v)
{
    if(lvl[u] < lvl[v])
        swap(u,v);
    u = findKthAncestor(u,lvl[u]-lvl[v]);
    if ( u == v)
        return u;
    for ( int i = M-1 ; i>= 0 ;i--)
    {
        if(ancestor[u][i] == ancestor[v][i])
            continue;
        u = ancestor[u][i];
        v = ancestor[v][i];
    }
    return ancestor[u][0];
}

bool comp(ll a,ll b){
    return lvl[a]>lvl[b];
}

int maxi(int u,int k,int v,int c)
{
    int ma=0;
    for ( int i = M-1 ;i>= 0 ;i--){

        if((1<<i) <= k){
            k -= (1<<i);
            ma=max(ma,sp[u][i]);
            u=findKthAncestor(u,1<<i);
        }
        if((1<<i) <= c){
            c -= (1<<i);
            ma=max(ma,sp[v][i]);
            v=findKthAncestor(v,1<<i);
        }
    }
    return ma;
}

int test(int u,int v){
    int md=getLCA(u,v);
    int lv1=lvl[u]-lvl[md],lv2=lvl[v]-lvl[md];
    return maxi(u,lv1,v,lv2);
}