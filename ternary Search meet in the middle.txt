///ternary Search///
vector<int> v;
double f(double x) {	// we could implement it faster
	double dist = 0;

	rep(i, v)
		dist += abs(x - v[i]);

	return dist;
}

pair<double, double> ternaryReal() {
	double left = v[0], right = v.back(); // set your range
	while (right - left > EPS) { // stop when reaching almost right = left
		double g = left + (right - left) / 3, h = left + 2 * (right - left) / 3;

		if (f(g) < f(h)) // use > if f increase then decrease
			right = h;
		else
			left = g;
	}

	return make_pair(left, f(left));
}


pair<int, int> ternaryDiscrete() {
	int left = v[0], right = v.back(); // set your range
	while (right-left > 3) { // We need 4 different positions
		int g = left + (right - left) / 3, h = left + 2 * (right - left) / 3;

		if (f(g) < f(h)) // use > if f increase then decrease
			right = h;
		else
			left = g;
	}

	int solIdx = left, answer = f(left++);
	for (int i = left; i <= right; ++i)	// iterate on the remaining
		if(answer > f(i))
			answer = f(i), solIdx = i;

	return make_pair(solIdx, answer);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///meet in middle///E. Maximum Subsequence  https://codeforces.com/problemset/problem/888/E

	int n,m;cin>>n>>m;
        vector<int>vec(n);
        fo(i,n)cin>>vec[i];
        ll maxi=0;
        set<int>s;
        for (int b = 0; b < (1<<min(n,18)); b++) {
            ll sum=0;
            for (int i = 0; i < min(n,18); i++) {
                    if (b&(1<<i)){
                        sum+=vec[i]%m;
                        sum+=m;
                        sum%=m;
                    }
            }
            s.insert(sum);
            maxi=max(maxi,sum);
        }
        if(n<=18)cout<<maxi;
        else {
            ll maximum=0;
            vector<int>vec2(all(s));
            for (int b = 0; b < (1<<(n-18)); b++) {
            ll sum=0;
            for (int i = 0; i < (n-18); i++) {
                    if (b&(1<<i)){
                        sum+=vec[i+18]%m;
                        sum+=m;
                        sum%=m;
                    }
            }
            int nn= m-sum-1;
            if(nn>0){
                    int nu=upper_bound(all(vec2),nn)-vec2.begin();
                    sum+=vec2[nu-1];
            }
            sum%=m;
            maximum=max(maximum,sum);
        }
        cout<<max(maxi,maximum);
    }
