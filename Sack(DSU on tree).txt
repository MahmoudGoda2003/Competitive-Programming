////////////////////////////////////


sack problems used to in cases of offline queries(no update operations)


int sz[N],dep[N];
vector<vll>g(N);
string str;
void getsz(int v, int p){
    sz[v] = 1;
    dep[v]=1;
    if(p!=-1)
        dep[v]=dep[p]+1;
    for(auto u : g[v])
        if(u != p){
            getsz(u, v);
            sz[v] += sz[u];
        }
}

vector<vector<pi>>query(N);
vector<bool>visited(N,0);
vector<vi>values(N,vi(28,0));
vi res(N);
void insertInValues(int node){ ///insert new subtree(changable)
    char ch=str[node-1];
    values[dep[node]][str[node-1]-'a']++;
    fvec(item,g[node]){
        if(!visited[item])
            insertInValues(item);
    }
}
void clearFromValues(int node){   /// clear un keeped subtree(changable)
    char ch=str[node-1];
    values[dep[node]][str[node-1]-'a']--;
    fvec(item,g[node]){
        if(!visited[item])clearFromValues(item);
    }
}
void dfs(int node,int par,bool keep){// all sack problems has same imp but some changes in insertion implementation 


    int maxSz=-1,greatNode=-1;
    fvec(item,g[node]){//(un changable)
        if(sz[item]>maxSz){
            maxSz=sz[item];
            greatNode=item;
        }
    }
    fvec(item,g[node]){//(un changable)
        if(item!=par&&greatNode!=item)
        {
            dfs(item,node,0);
        }
    }
    if(maxSz!=-1){//(un changable)
        dfs(greatNode,node,1);
        visited[greatNode]=1;
    }
    insertInValues(node);
    fvec(item,query[node]){ //(changable)--> queries calculation
        ll index=item.S,h=item.F;
        if(dep[node]>h){
            res[index]=1;
            continue;
        }
        ll oddCount=0;
        fo(i,27){
           oddCount+=values[h][i]%2;
        }
        if(oddCount>1){
            res[index]=0;
        }else{
            res[index]=1;
        }
    }
    if(maxSz!=-1)visited[greatNode]=0;//(un changable)
    if(keep == false){ //(un changable)
        clearFromValues(node);
    }
}