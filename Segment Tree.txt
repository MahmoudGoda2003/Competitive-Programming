ll seg[N<<2];
ll arr[N];
ll num;
void Build_seg(ll node,ll l , ll r) {// DONT FORGET BUILD IN MAIN YA 7OMAR
    if (l == r) {
        seg[node] = arr[l];
        return;
    }
    ll mid = (l + r) / 2;
    Build_seg(node * 2, l, mid);
    Build_seg(node * 2 + 1, mid + 1, r);
    seg[node] = seg[node * 2] + seg[node * 2 + 1];// DONT FORGET BUILD IN MAIN YA 7OMAR
}
void update(ll node,ll l ,ll r,ll idx,ll val) {// DONT FORGET BUILD IN MAIN YA 7OMAR
    if (l == r) {
        seg[node] = val;
        return;
    }
    ll mid = (l + r) / 2;
    if (idx <= mid) update(node * 2, l, mid, idx,val);
    else update(node * 2 + 1, mid + 1, r, idx,val);
    seg[node] = seg[node * 2] + seg[node * 2 + 1];// DONT FORGET BUILD IN MAIN YA 7OMAR
}
ll query(ll node,ll l ,ll r,ll st,ll en) {// DONT FORGET BUILD IN MAIN YA 7OMAR
       if(l>en || r<st){
        return 0;
       }
       if(l>=st && r<=en){
             return seg[node];
       }
       ll md= (l+r)/2 ;
       return (query(node*2,l,md,st,en)+query(node*2+1,md+1,r,st,en));// DONT FORGET BUILD IN MAIN YA 7OMAR
}

// get the index of some value
ll solve(ll node,ll l,ll r,ll val){
    ll md=(l+r)/2;
    if(l==r)return l;
    if(seg[2*node]<val){
        return solve(2*node,l,md,val);
    }else return solve(2*node+1,md+1,r,val);
}

// maximum or minimum segment tree
ll seg[N<<2];
ll arr[N];
ll num;
ll sum[N<<2], suff[N<<2], pref[N<<2];
void Build_seg(ll node,ll l , ll r) {
    if (l == r) {
        seg[node] = arr[l];
        pref[node]=arr[l];
        sum[node] = arr[l];
        suff[node]=arr[l];
        return;
    }
    ll mid = (l + r) / 2;
    Build_seg(node * 2, l, mid);
    Build_seg(node * 2 + 1, mid + 1, r);
    ll n=node;
    pref[node] = max(pref[2 * n], sum[2 * n] + pref[2 * n + 1]);
    suff[node] = max(suff[2 * n + 1], suff[2 * n] + sum[2 * n + 1]);
    seg[node] = max(seg[2 * n], max(seg[2 * n + 1], suff[2 * n] + pref[2 * n + 1]));
    sum[node] = sum[2 * n] + sum[2 * n + 1];
}
void update(ll node,ll l ,ll r,ll idx,ll val) {
    if (l == r) {
        seg[node] =val;
        pref[node]=val;
        sum[node] = val;
        suff[node]=val;
        return;
    }
    ll mid = (l + r) / 2;
    if (idx <= mid) update(node * 2, l, mid, idx,val);
    else update(node * 2 + 1, mid + 1, r, idx,val);
    ll n=node;
    pref[node] = max(pref[2 * n], sum[2 * n] + pref[2 * n + 1]);
    suff[node] = max(suff[2 * n + 1], suff[2 * n] + sum[2 * n + 1]);
    seg[node] = max(seg[2 * n], max(seg[2 * n + 1], suff[2 * n] + pref[2 * n + 1]));
    sum[node] = sum[2 * n] + sum[2 * n + 1];

}
ll query(ll node,ll l ,ll r,ll st,ll en) {
       if(l>en || r<st){
        return 0;
       }
       if(l>=st && r<=en){
             return seg[node];
       }
       ll md= (l+r)/2 ;
       return (query(node*2,l,md,st,en)+query(node*2+1,md+1,r,st,en));
}
---->to  return the index of kth one (sum seg)
ll solve(ll node,ll l,ll r,ll k){
    if(r==l){
        return l-1;
     }
    ll md=(l+r)/2;
    ll re=seg[2*node];
    //cout<<l<<" "<<md<<" "<<r<<" "<<re<<" "<<k<<'\n';
    if(k<=re){
        return solve(node*2,l,md,k);
    }else {
        return solve(2*node+1,md+1,r,k-re);
    }
}

-->> get number of different elements on a segment and maximun element is 40


ll seg[N<<2][41];
ll arr[N];
ll num;
void Build_seg(ll node,ll l , ll r) {
    if (l == r) {
        seg[node][arr[l]]++;
        return;
    }
    ll mid = (l + r) / 2;
    Build_seg(node * 2, l, mid);
    Build_seg(node * 2 + 1, mid + 1, r);
   fo(i,41)seg[node][i]=seg[2*node][i]+seg[2*node+1][i];
}
void update(ll node,ll l ,ll r,ll idx,char val) {
    if (l == r) {
        seg[node][arr[l]]--;
        seg[node][val]++;
        return;
    }
    ll mid = (l + r) / 2;
    if (idx <= mid) update(node * 2, l, mid, idx,val);
    else update(node * 2 + 1, mid + 1, r, idx,val);
   fo(i,41)seg[node][i]=seg[2*node][i]+seg[2*node+1][i];
 
}
vll vec(41);
void query(ll node,ll l ,ll r,ll st,ll en) {
       if(l>en || r<st){
            return ;
       }
       if(l>=st && r<=en){
            fo(i,41){
                if(seg[node][i])vec[i]=1;
            }
            //cout<<'\n';
            return ;
       }
       ll md= (l+r)/2 ;
       query(node*2,l,md,st,en);query(node*2+1,md+1,r,st,en);
}
/// number of ones in vec in the query is number of different elements on a segment