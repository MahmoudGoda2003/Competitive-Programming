Vector Dot/Scalar/Inner Product

vectors A,B

A.B= ||A||*||B||*cos(seta)

A.B=0 if seta=90 


Cross/Vector Product

vectors A,B

A x B= ||A||*||B||*sin(seta)

A x B=0 if seta=0 

||A x B|| =||A||^2*||B||^2-(A.B)^2


Euclidean Transformations


Translation


add vector (h,k) to (x,y) point 

x`=x+h ,  y`=y+k


|x`|=| 1 0 h |   | x |
|y`| | 0 1 k | * | y |
|1 | | 0 0 1 |   | 1 |

|x|=| 1 0 -h |   | x`|
|y| | 0 1 -k | * | y`|
|1| | 0 0  1 |   | 1 |

Rotation


rotate by angle --> a

x`= x*cos(a) - y*sin(a)

y`= x*sin(a) + y*cos(a)


|x`|=| cos(a) -sin(a) 0 |   | x |
|y`| | sin(a)  cos(a) 0 | * | y |
|1 | |   0      0     1 |   | 1 |



|x|=|  cos(a)  sin(a) 0 |   | x`|
|y| | -sin(a)  cos(a) 0 | * | y`|
|1| |    0      0     1 |   | 1 |



// we can compine all Transformations by using Matrix Multiplication to create one matrix of the composite Transformation


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




const double PI  = acos(-1.0);// PI = 2 * acos(0.0)

typedef complex<double> point;

#define X real()

#define Y imag()

#define angle(a)                (atan2((a).imag(), (a).real()))

#define vec(a,b)                ((b)-(a))

#define same(p1,p2)             (dp(vec(p1,p2),vec(p1,p2)) < EPS)

#define dp(a,b)                 ( (conj(a)*(b)).real() )	//a*b cos(T), if zero -> prep dot product

#define cp(a,b)                 ( (conj(a)*(b)).imag() )	//a*b sin(T), if zero -> parllel cross product

#define length(a)               (hypot((a).imag(), (a).real()))

#define normalize(a)            (a)/length(a)

#define polar(r,ang)            ((r)*exp(point(0,ang)))  	//Already added in c++11

#define rotateO(p,ang)          ((p)*exp(point(0,ang)))	  	//point, angle 

#define rotateA(p,ang,about)  (rotateO(vec(about,p),ang)+about)	//point ,angle ,point

#define reflectO(v,m)  (conj((v)/(m))*(m))			//point ,point --> revlect v around m and orgin

int dcmp(double a,double b){
	return fabs(a-b) <= EPS ? 0 : a < b ? -1 : 1;
}



point reflect(point p, point p0, point p1) { 			//revlect p around p1 and using p0
    point z = p-p0, w = p1-p0;
    return conj(z/w)*w + p0; // Refelect point p1 around p0p1
}



bool isCollinear(point a, point b, point c) {			//return If 3 points are on a line
	return fabs( cp(b-a, c-a) ) < EPS;	
} 



bool isPointOnRay(point p0, point p1, point p2) { 		//Point on ray if it is on  A->B 
    if(length(p2-p0) < EPS) return true;
    return same( normalize(p1-p0), normalize(p2-p0) );
}



bool isPointOnSegment(point a, point b, point c) {		//Point on segment if it is on 2 rays: A->B and B->A
	return isPointOnRay(a, b, c) && isPointOnRay(b, a, c);
}



double distToLine( point p0, point p1, point p2 ) { 		//Distance = Perpendicular Height from C to A-B

	return fabs(cp(p1-p0, p2-p0)/length(p0-p1)); // area = 0.5*b*h

}




double distToSegment( point p0, point p1, point p2 ) {		//distance from point p2 to segment p0-p1

	double d1, d2;
	point v1 = p1-p0, v2 = p2-p0;
	if( (d1 = dp(v1, v2) ) <= 0)	return length(p2-p0);
	if( (d2 = dp(v1, v1) ) <= d1)	return length(p2-p1);
	double t = d1/d2;
	return length(p2 - (p0 + v1*t) );

}





bool intersectSegments(point a, point b, point c, point d, point & intersect) {
  double d1 = cp(a - b, d - c), d2 = cp(a - c, d - c), d3 = cp(a - b, a - c);
  if (fabs(d1) < EPS)
    return false;  // Parllel || identical

  double t1 = d2 / d1, t2 = d3 / d1;
  intersect = a + (b - a) * t1;  // insersect point 
  	
  if (t1 > 1+EPS||t1 < -EPS || t2 < -EPS || t2 > 1 + EPS)	// ti>1+ESP if the part is segment remove it for rays
    return false;  						//e.g ab is segment, cd is segment ... change to whatever
  return true;
}


// Where is P2 relative to segment p0-p1?
// ccw = +1 => angle > 0 or collinear after p1
// cw = -1 => angle < 0 or collinear after p0
// Undefined = 0 => Collinar in range [a, b]. Be careful here
int ccw(point a, point b, point c) {
  point v1(b - a), v2(c - a);
  double t = cp(v1, v2);

  if (t > +EPS)
	return +1;
  if (t < -EPS)
	return -1;
  if (v1.X * v2.X < -EPS || v1.Y * v2.Y < -EPS)
	return -1;						// after before P0
  if (norm(v1) < norm(v2) - EPS)
	return +1; 						// after P1
  return 0;
}




bool intersect(point p1, point p2, point p3, point p4) {	//return true or false for intersection between 2 segments

    // special case handling if a segment is just a point
	
    bool x = (p1 == p2), y = (p3==p4);
    if(x && y)  return p1 == p3;
    if(x)   return ccw(p3, p4, p1) == 0;
    if(y)   return ccw(p1, p2, p3) == 0;

    return  ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0  &&
        ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*

a	---> sector angle 

sector area	= 	a/360 * circle area

length of arc 	= 	a/360 * circle circumference

*/
// 2 points has infinite circles

// Find circle passes with 3 points, some times, there is no circle! (in case colinear)

// Draw two perpendicular lines and intersect them

pair<double, point> findCircle(point a, point b, point c) {
	//create median, vector, its prependicular
	point m1 = (b+a)*0.5, v1 = b-a, pv1 = point(v1.Y, -v1.X);
	point m2 = (b+c)*0.5, v2 = b-c, pv2 = point(v2.Y, -v2.X);
	point end1 = m1+pv1, end2 = m2+pv2, center;
	intersectSegments(m1, end1, m2, end2, center);
	return make_pair( length(a-center), center );  		// (raduis,center)
}




// get intersections between line and circles

// If line intersect cirlce at point p, and p = p0 + t(p1-p0)

// Then (p-c)(p-c) = r^2 substitute p and rearrange

// (p1-p0)(p1-p0)t^2 + 2(p1-p0)(p0-C)t + (p0-C)(p0-C) = r*r; -> Quadratic

vector<point> intersectLineCircle(point p0, point p1, point C, double r) {	// p0,p1 line, C--> center , r--> raduis
    double a = dp(p1-p0, p1-p0), b = 2*dp(p1-p0, p0-C), c = dp(p0-C, p0-C) - r*r;
    double f = b*b - 4*a*c;

    vector<point> v;
    if( dcmp(f, 0) >= 0) {
	    if( dcmp(f, 0) == 0)	f = 0;
	    double t1 =(-b + sqrt(f))/(2*a);
	    double t2 =(-b - sqrt(f))/(2*a);
	    v.push_back( p0 + t1*(p1-p0) );
	    if( dcmp(f, 0) != 0)	v.push_back( p0 + t2*(p1-p0) );
    }
    return v;
}



// return the intersections between 2 circles


double getAngle_A_abc(double a,double b,double c){
    return acos((b*b + c*c - a*a)/(2*b*c));

}
vector<point> intersectCircleCircle(point c1, double r1, point c2, double r2) {
  // Handle infinity case first: same center/radius and r > 0
  if (same(c1, c2) && dcmp(r1, r2) == 0 && dcmp(r1, 0) > 0)
    return vector<point>(3, c1);    // infinity 2 same circles (not points)

  // Compute 2 intersection case and handle 0, 1, 2 cases
  double ang1 = angle(c2 - c1), ang2 = getAngle_A_abc(r2, r1, length(c2 - c1));// using cosin law

  if(::isnan(ang2)) // if r1 or d = 0 => nan in getAngle_A_abc (/0)
    ang2 = 0; // fix corruption

  vector<point> v(1, polar(r1, ang1 + ang2) + c1);

  // if point NOT on the 2 circles = no intersection
  if(dcmp(dp(v[0]-c1, v[0]-c1), r1*r1) != 0 ||
      dcmp(dp(v[0]-c2, v[0]-c2), r2*r2) != 0 )
    return vector<point>();

  v.push_back(polar(r1, ang1 - ang2) + c1);
  if(same(v[0], v[1]))  // if same, then 1 intersection only
    v.pop_back();
  return v;
}

//////////////////////////////////////////////////////////////////////////////////////////

// from book 


struct point { 
	double x, y;
	point() { x = y = 0.0; }
	point(double _x, double _y) : x(_x), y(_y) {}
	bool operator < (point other) const { 
		if (fabs(x - other.x) > EPS) 
			return x < other.x; 
		return y < other.y;
	} 


	bool operator == (point other) const {
		return (fabs(x - other.x) < EPS && (fabs(y - other.y) < EPS));
	}
};

double dist(point p1, point p2) { 
	return hypot(p1.x - p2.x, p1.y - p2.y);	// hypot(dx, dy) returns sqrt(dx * dx + dy * dy)
} 




struct line { double a, b, c; }; // ax+by+c=0  ===>  line equation



// take 2 points and return the line pass with them

// the answer is stored in the third parameter (pass by reference) 

void pointsToLine(point p1, point p2, line &l) {
    if (fabs(p1.x - p2.x) < EPS) {		// vertical line is fine
        l.a = 1.0; l.b = 0.0; l.c = -p1.x; 	// default values
    } else {
        l.a = -(double)(p1.y - p2.y) / (p1.x - p2.x);
        l.b = 1.0; 				// IMPORTANT: we fix the value of b to 1.0
        l.c = -(double)(l.a * p1.x) - p1.y;
    }
}



bool areParallel(line l1, line l2) { // check coefficients a & b
    return (fabs(l1.a-l2.a) < EPS) && (fabs(l1.b-l2.b) < EPS);
}
bool areSame(line l1, line l2) { // also check coefficient c
    return areParallel(l1 ,l2) && (fabs(l1.c - l2.c) < EPS);
}


// returns true (+ intersection point) if two lines are intersect
bool areIntersect(line l1, line l2, point &p) {
    if (areParallel(l1, l2)) return false; // no intersection
// solve system of 2 linear algebraic equations with 2 unknowns
    p.x = (l2.b * l1.c - l1.b * l2.c) / (l2.a * l1.b - l1.a * l2.b);
// special case: test for vertical line to avoid division by zero
    if (fabs(l1.b) > EPS) p.y = -(l1.a * p.x + l1.c);
    else p.y = -(l2.a * p.x + l2.c);
    return true;
}


struct vec { double x, y; // name: ‘vec’ is different from STL vector
    vec(double _x, double _y) : x(_x), y(_y) {}
};
vec toVec(point a, point b) { // convert 2 points to vector a->b
    return vec(b.x - a.x, b.y - a.y); 
}
vec scale(vec v, double s) { // nonnegative s = [<1 .. 1 .. >1]
    return vec(v.x * s, v.y * s); 
} // shorter.same.longer
point translate(point p, vec v) { // translate p according to v
    return point(p.x + v.x , p.y + v.y); 
}


double dot(vec a, vec b) {
    return (a.x * b.x + a.y * b.y);
}
double norm_sq(vec v) {
    return v.x * v.x + v.y * v.y;
}
// returns the distance from p to the line defined by
// two points a and b (a and b must be different)
// the closest point is stored in the 4th parameter (byref)
double distToLine(point p, point a, point b, point &c) { // get the orthogonal distance to line ab from p point
// formula: c = a + u * ab
    vec ap = toVec(a, p), ab = toVec(a, b);
    double u = dot(ap, ab) / norm_sq(ab);
    c = translate(a, scale(ab, u)); // translate a to c
    return dist(p, c);
}


// returns the distance from p to the line segment ab defined by
// two points a and b (still OK if a == b)
// the closest point is stored in the 4th parameter (byref)
double distToLineSegment(point p, point a, point b, point &c) {
    vec ap = toVec(a, p), ab = toVec(a, b);

    double u = dot(ap, ab) / norm_sq(ab);

    if (u < 0.0) { 
        c = point(a.x, a.y); // closer to a
        return dist(p, a);
    } // Euclidean distance between p and a

    if (u > 1.0) { 
        c = point(b.x, b.y); // closer to b
        return dist(p, b);
    } // Euclidean distance between p and b

    return distToLine(p, a, b, c);

} // run distToLine as above



double angle(point a, point o, point b) { // returns angle aob in rad
    vec oa = toVec(o, a), ob = toVec(o, b);
    return acos(dot(oa, ob) / sqrt(norm_sq(oa) * norm_sq(ob)));
}



double cross(vec a, vec b) { return a.x * b.y - a.y * b.x; }
// note: to accept collinear points, we have to change the ‘> 0’
// returns true if point r is on the left side of line pq
bool ccw(point p, point q, point r) {
    return cross(toVec(p, q), toVec(p, r)) > 0;
}
// returns true if point r is on the same line as the line pq
bool collinear(point p, point q, point r) {
    return fabs(cross(toVec(p, q), toVec(p, r))) < EPS; 
}

Given 2 points on the circle (p1 and p2) and radius r of the corresponding circle, we
can determine the location of the centers (c1 and c2) of the two possible circles

bool circle2PtsRad(point p1, point p2, double r, point &c) {
    double d2 = (p1.x - p2.x) * (p1.x - p2.x) +
                (p1.y - p2.y) * (p1.y - p2.y);
    double det = r * r / d2 - 0.25;
    if (det < 0.0) return false;
    double h = sqrt(det);
    c.x = (p1.x + p2.x) * 0.5 + (p1.y - p2.y) * h;
    c.y = (p1.y + p2.y) * 0.5 + (p2.x - p1.x) * h;
    return true;
} // to get the other center, reverse p1 and p2



double perimeter(double ab, double bc, double ca){
    return ab+bc+ca;
}
double area(double ab, double bc, double ca) {
    double s=.5*perimeter(ab, bc, ca);
    return ::sqrt(s*(s-ab)*(s-bc)*(s-ca));
}

A triangle with area A and semi-perimeter s has an inscribed circle (incircle) with radius r = A/s.

double rInCircle(double ab, double bc, double ca) {
    
    return area(ab, bc, ca) / (0.5 * perimeter(ab, bc, ca)); 

}

double rInCircle(point a, point b, point c) {
    
    return rInCircle(dist(a, b), dist(b, c), dist(c, a)); 

}


The center of incircle is the meeting point between the triangle’s angle bisectors



// assumption: the required points/lines functions have been written
// returns 1 if there is an inCircle center, returns 0 otherwise
// if this function returns 1, ctr will be the inCircle center
// and r is the same as rInCircle
int inCircle(point p1, point p2, point p3, point &ctr, double &r) {
    r = rInCircle(p1, p2, p3);
    
    if (fabs(r) < EPS) return 0; // no inCircle center
    
    line l1, l2; // compute these two angle bisectors
    
    double ratio = dist(p1, p2) / dist(p1, p3);
    
    point p = translate(p2, scale(toVec(p2, p3), ratio / (1 + ratio)));
   
    pointsToLine(p1, p, l1);
    
    ratio = dist(p2, p1) / dist(p2, p3);
    
    p = translate(p1, scale(toVec(p1, p3), ratio / (1 + ratio)));
    
    pointsToLine(p2, p, l2);
    
    areIntersect(l1, l2, ctr); // get their intersection point
    
    return 1;
}



A triangle with 3 sides: a, b, c and area A has an circumscribed circle (circumcircle) with radius R = a × b × c/(4 × A).



double rCircumCircle(double ab, double bc, double ca) {
    return ab * bc * ca / (4.0 * area(ab, bc, ca));
}

double rCircumCircle(point a, point b, point c) {
    return rCircumCircle(dist(a, b), dist(b, c), dist(c, a));
}


Case 1: If the number is odd:

Let us assume the number be “x”.

If “x” is odd, then the Pythagorean triple = x, (x^2/2) – 0.5, (x^2/2) + 0.5.


Case 2: If the number is even:

If “x” is even, then the Pythagorean triple = x, (x/2)^2-1, (x/2)^2+1.




Program to find Circumcenter of a Triangle


#define pdd pair<double, double>
 
// Function to find the line given two points
void lineFromPoints(pdd P, pdd Q, double &a,
                        double &b, double &c)
{
    a = Q.second - P.second;
    b = P.first - Q.first;
    c = a*(P.first)+ b*(P.second);
}
 
// Function which converts the input line to its
// perpendicular bisector. It also inputs the points
// whose mid-point lies on the bisector
void perpendicularBisectorFromLine(pdd P, pdd Q,
                 double &a, double &b, double &c)
{
    pdd mid_point = make_pair((P.first + Q.first)/2,
                            (P.second + Q.second)/2);
 
    // c = -bx + ay
    c = -b*(mid_point.first) + a*(mid_point.second);
 
    double temp = a;
    a = -b;
    b = temp;
}
 
// Returns the intersection point of two lines
pdd lineLineIntersection(double a1, double b1, double c1,
                         double a2, double b2, double c2)
{
    double determinant = a1*b2 - a2*b1;
    if (determinant == 0)
    {
        // The lines are parallel. This is simplified
        // by returning a pair of FLT_MAX
        return make_pair(FLT_MAX, FLT_MAX);
    }
 
    else
    {
        double x = (b2*c1 - b1*c2)/determinant;
        double y = (a1*c2 - a2*c1)/determinant;
        return make_pair(x, y);
    }
}
 
void findCircumCenter(pdd P, pdd Q, pdd R)
{
    // Line PQ is represented as ax + by = c
    double a, b, c;
    lineFromPoints(P, Q, a, b, c);
 
    // Line QR is represented as ex + fy = g
    double e, f, g;
    lineFromPoints(Q, R, e, f, g);
 
    // Converting lines PQ and QR to perpendicular
    // vbisectors. After this, L = ax + by = c
    // M = ex + fy = g
    perpendicularBisectorFromLine(P, Q, a, b, c);
    perpendicularBisectorFromLine(Q, R, e, f, g);
 
    // The point of intersection of L and M gives
    // the circumcenter
    pdd circumcenter =
           lineLineIntersection(a, b, c, e, f, g);
 
    if (circumcenter.first == FLT_MAX &&
        circumcenter.second == FLT_MAX)
    {
        cout << "The two perpendicular bisectors "
                "found come parallel" << endl;
        cout << "Thus, the given points do not form "
                "a triangle and are collinear" << endl;
    }
 
    else
    {
        cout << "The circumcenter of the triangle PQR is: ";
        cout << "(" << circumcenter.first << ", "
             << circumcenter.second  << ")" << endl;
    }
}
 
// Driver code.
int main()
{
    pdd P = make_pair(6, 0);
    pdd Q = make_pair(0, 0);
    pdd R = make_pair(0, 8);
    findCircumCenter(P, Q, R);
    return 0;
}








