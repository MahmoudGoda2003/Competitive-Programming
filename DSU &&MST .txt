int N=10e5;

vector<int> par(N), sz(N);

void init(int n)
{
    for ( int i = 1 ; i <= n ;i++)
        par[i] = i , sz[i] = 1;
}
// O(n) ---> O(n ^ 2)
int findparent( int u)
{
    if(par[u] == u)
        return  u;
    return par[u] = findparent(par[u]);
}
bool iscyclic = false;
void connect( int u , int v)
{
    u = findparent(u);
    v = findparent(v);
    if ( u == v)
    {
        iscyclic =true;
        return;
    }
    if(sz[v] < sz[u])
        par[v] = u ,sz[u] += sz[v];
    else
        par[u] = v,sz[v] += sz[u];
}
bool isconnected( int u , int v)
{
    return (findparent(u) == findparent(v));
}

// Kruskal`s algoritm to get the minimum spining trees from undirected weighted graph

    vector<pair<int,pair<int,int>>> vec;
    for ( int i = 0 ; i < n;  i++)
    {
       	int u,v,k;cin>>u>>v>>k;
        vec.pb({k,{u,v}});
    }
    sort(vec.begin(),vec.end());
    int ans=0;
    for(int i=0;i<n;i++)
	{
		int u=vec[i].second.first,v=vec[i].second.second;
		if(isconnected(u,v))
			continue;
		ans+=vec[i].first;
		connect(u,v);	
				
	}

//Prim`s algoritm to return minimun spinning tree
int n;
vector<vector<int>> adj; // adjacency matrix of graph
const int INF = 10e7; // weight INF means there is no edge

struct Edge {
    int w = INF, to = -1;
};

void prim() {
    int total_weight = 0;
    vector<bool> selected(n, false);
    vector<Edge> min_e(n);
    min_e[0].w = 0;

    for (int i=0; i<n; ++i) {
        int v = -1;
        for (int j = 0; j < n; ++j) {
            if (!selected[j] && (v == -1 || min_e[j].w < min_e[v].w))
                v = j;
        }

        if (min_e[v].w == INF) {
            cout << "No MST!" << endl;
            exit(0);
        }

        selected[v] = true;
        total_weight += min_e[v].w;
        if (min_e[v].to != -1)
            cout << v << " " << min_e[v].to << endl;

        for (int to = 0; to < n; ++to) {
            if (adj[v][to] < min_e[to].w)
                min_e[to] = {adj[v][to], v};
        }
    }

    cout << total_weight << endl;
}