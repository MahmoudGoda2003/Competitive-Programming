vector<vector < int > >adj(N);
vector<bool>vis(N,0);
vll st(N,0),en(N,0);
ll ind=0;
vll value(N);
 
void dfs( int node,int par)
{
    vis[node] = true;
    st[node]=en[node]=ind--;
    a[en[node]]=value[node];
    if(par!=-1){
        a[en[node]]+=a[en[par]];
    }
    for ( auto child : adj[node])
        if(vis[child] == false)
        {
            dfs(child,node);
            st[node]=min(st[node],st[child]);
        }
}
void func(int inde) {
    cin>>num;ll q;cin>>q;
    ind=num;
    fp(i,1,num)cin>>value[i];
    fo(i,num-1){
        ll u,v;cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    dfs(1,-1);
    build(1,1,num);
    fo(i,q){
        ll t;cin>>t;
        if(t==1){
            ll u,v;cin>>u>>v;
            ll vv= query(1,1,num,en[u],en[u]);
            update(1,1,num,st[u],en[u],v-value[u]);
            value[u]=v;
        }else {
            ll u;cin>>u;
            cout<<query(1,1,num,en[u],en[u])<<'\n';
        }
    }
}