///////////////////////

https://codeforces.com/contest/1788/problem/E --> get the maximum length of segments that prifix greater than zero 



/////////////////////////////////////////////////////////
ll seg[N<<2];
ll arr[N];
ll num;
void Build_seg(ll node,ll l , ll r) {// DONT FORGET BUILD IN MAIN YA 7OMAR
    if (l == r) {
        seg[node] = arr[l];
        return;
    }
    ll mid = (l + r) / 2;
    Build_seg(node * 2, l, mid);
    Build_seg(node * 2 + 1, mid + 1, r);
    seg[node] = seg[node * 2] + seg[node * 2 + 1];// DONT FORGET BUILD IN MAIN YA 7OMAR
}
void update(ll node,ll l ,ll r,ll idx,ll val) {// DONT FORGET BUILD IN MAIN YA 7OMAR
    if (l == r) {
        seg[node] = val;
        return;
    }
    ll mid = (l + r) / 2;
    if (idx <= mid) update(node * 2, l, mid, idx,val);
    else update(node * 2 + 1, mid + 1, r, idx,val);
    seg[node] = seg[node * 2] + seg[node * 2 + 1];// DONT FORGET BUILD IN MAIN YA 7OMAR
}
ll query(ll node,ll l ,ll r,ll st,ll en) {// DONT FORGET BUILD IN MAIN YA 7OMAR
       if(l>en || r<st){
        return 0;
       }
       if(l>=st && r<=en){
             return seg[node];
       }
       ll md= (l+r)/2 ;
       return (query(node*2,l,md,st,en)+query(node*2+1,md+1,r,st,en));// DONT FORGET BUILD IN MAIN YA 7OMAR
}
// get kth one
ll solve(ll node,ll l,ll r,ll k){// seg on sum
    if(r==l){
        return l-1;
     }
    ll md=(l+r)/2;
    ll re=seg[2*node];
    //cout<<l<<" "<<md<<" "<<r<<" "<<re<<" "<<k<<'\n';
    if(k<=re){
        return solve(node*2,l,md,k);
    }else {
        return solve(2*node+1,md+1,r,k-re);
    }
}
// get the index of some value
ll solve(ll node,ll l,ll r,ll val){
    ll md=(l+r)/2;
    if(l==r)return l;
    if(seg[2*node]<val){
        return solve(2*node,l,md,val);
    }else return solve(2*node+1,md+1,r,val);
}



/// First element at least X

ll solve(ll node,ll l,ll r,ll x){// seg on max
    if(r==l)return l;
    ll re=seg[2*node];
    ll md=(r+l)/2;
    if(x<=re){
        return solve(2*node,l,md,x);
    }else return solve(2*node+1,md+1,r,x);
}
// maximum or minimum segment tree


ll arr[N];
struct point{
    int seg,sum,suff,pref;
};
point seg[N<<2];
point merge(point node1,point node2){

    point p={0,0,0,0};
    p.pref = max(node1.pref, node1.sum + node2.pref);
    p.suff = max(node2.suff, node1.suff + node2.sum);
    p.seg = max(node1.seg, max(node2.seg, node1.suff + node2.pref));
    p.sum = node1.sum + node2.sum;
    return p;
}
void Build_seg(ll node,ll l , ll r) {
    if (l == r) {
        seg[node] ={ arr[l],arr[l],arr[l],arr[l]};
        return;
    }
    ll mid = (l + r) / 2;
    Build_seg(node * 2, l, mid);
    Build_seg(node * 2 + 1, mid + 1, r);
    seg[node]= merge(seg[node*2],seg[node*2+1]);
}
void update(ll node,ll l ,ll r,ll idx,ll val) {
    if (l == r) {
        seg[node]={val,val,val,val};
        return;
    }
    ll mid = (l + r) / 2;
    if (idx <= mid) update(node * 2, l, mid, idx,val);
    else update(node * 2 + 1, mid + 1, r, idx,val);
    seg[node]= merge(seg[node*2],seg[node*2+1]);

}
point query(ll node,ll l ,ll r,ll st,ll en) {
    if(l>en || r<st){
        return {0,0,0,0};
    }
    if(l>=st && r<=en){
        return seg[node];
    }
    ll md= (l+r)/2 ;
    return merge(query(node*2,l,md,st,en),query(node*2+1,md+1,r,st,en));
}
ll solve(point p){
    return max({p.seg,p.sum,p.suff,p.pref});
}
void func(int index){
    ll n;cin>>n;
    ll q;cin>>q;
    for (int i = 1; i <= n ; ++i) {
        cin>>arr[i];
    }
    Build_seg(1,1,n);
    cout<<query(1,1,n,1,n).seg<<endl;
    while (q--){
        ll u,v;cin>>u>>v;
        cout<<query(1,1,n,u,v).seg<<endl;
    }
}


-->> get number of different elements on a segment and maximun element is 40

ll seg[N<<2][41];
ll arr[N];
ll num;
void Build_seg(ll node,ll l , ll r) {
    if (l == r) {
        seg[node][arr[l]]++;
        return;
    }
    ll mid = (l + r) / 2;
    Build_seg(node * 2, l, mid);
    Build_seg(node * 2 + 1, mid + 1, r);
   fo(i,41)seg[node][i]=seg[2*node][i]+seg[2*node+1][i];
}
void update(ll node,ll l ,ll r,ll idx,char val) {
    if (l == r) {
        seg[node][arr[l]]--;
        seg[node][val]++;
        return;
    }
    ll mid = (l + r) / 2;
    if (idx <= mid) update(node * 2, l, mid, idx,val);
    else update(node * 2 + 1, mid + 1, r, idx,val);
   fo(i,41)seg[node][i]=seg[2*node][i]+seg[2*node+1][i];
 
}
vll vec(41);
void query(ll node,ll l ,ll r,ll st,ll en) {
       if(l>en || r<st){
            return ;
       }
       if(l>=st && r<=en){
            fo(i,41){
                if(seg[node][i])vec[i]=1;
            }
            //cout<<'\n';
            return ;
       }
       ll md= (l+r)/2 ;
       query(node*2,l,md,st,en);query(node*2+1,md+1,r,st,en);
}
/// number of ones in vec in the query is number of different elements on a segment





///// binary search on segment 
ll solveSt(ll st,ll en){ 

    while (st<en){
        ll md=(st+en+1)/2;
        if(query(1,1,index,md,en)){
            st=md;
        }else{
            en=md-1;
        }
    }
    if(query(1,1,index,st,st)){
        return st;
    }else return minOO;
}
ll solveEn(ll st,ll en){
    while (st<en){
        ll md=(st+en)/2;
        if(query(1,1,index,st,md)){
            en=md;
        }else{
            st=md+1;
        }
    }
    if(query(1,1,index,st,st)){
        return en;
    }else return OO;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////



dynamic segment tree


https://codeforces.com/contest/960/problem/F


struct node{

    node *L, *R;
    int val;
    node(){
        val = 0;
        L = R = NULL;
    }
};
node * seg[N];

void update(node * & cur, int s, int e, int idx,int val){//pass seg[idx] as first Argument
    if(!cur)
        cur = new node();
    cur->val = max(cur->val,val);

    if(s==e)return;

    int md = (s+e)>>1;

    if(idx<=md)
        update(cur->L,s,md,idx,val);
    else
        update(cur->R,md+1,e,idx,val);
}

int query(node * & cur, int s, int e, int l, int r){
    if(!cur||r<s||e<l||l>r)return 0;
    if(l<=s&&e<=r)return cur->val;
    int md = (s+e)>>1;
    return max(query(cur->L,s,md,l,r),query(cur->R,md+1,e,l,r));
}

int main(){
  ios
  int n, m;
  cin >> n >> m;
  int u, v, w;
  int ans = 0;
  while(m--){
    cin >> u >> v >> w;
    int x = qry(trees[u],0,1000000,0,w-1);
    ans = max(ans,x+1);
    upd(trees[v],0,1000000,w,x+1);
  }
 
  cout << ans << '\n';
  return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////


segment on Euler's totient  ( Euler's totient  values is tree rooted at 1 with 22 levels)

https://codeforces.com/contest/1797/problem/E


const ll maximum=5e6+5;
int phi[maximum+10];

ll EulerPhi(ll num) {
    return phi[num];
}

int lvl[maximum];
void pre()//---> taken from Abdel-AzizMostafa
{
    phi[0] = 0;
    phi[1] = 1;
    for (int i = 2; i < maximum; i++)
        phi[i] = i - 1;
    for (int i = 2; i < maximum; i++)
        for (int j = 2 * i; j < maximum; j += i)
            phi[j] -= phi[i];
    for (int i = 2; i < maximum; i++)
        lvl[i] = lvl[phi[i]] + 1;
}

int findKthAncestor( int u , int k)		//return zero if k > depth --> call dfs(1,0) in main
{
    while (k--)u=phi[u];
    return u;
}

int getLCA( int u , int v)
{
    if(lvl[u] < lvl[v])
        swap(u,v);
    u = findKthAncestor(u,lvl[u]-lvl[v]);

    while (u!=v){
        u= findKthAncestor(u,1);
        v= findKthAncestor(v,1);
    }
    return u;
}

ll seg[N<<2], a[N], LCA[N<<2],segLvl[N<<2];
void Build_seg(ll node,ll l , ll r) {// DONT FORGET BUILD IN MAIN YA 7OMAR
    if (l == r) {
        seg[node]=(a[l]!=1);
        LCA[node]=a[l];
        segLvl[node]=lvl[a[l]];
        return;
    }
    ll mid = (l + r) / 2;
    Build_seg(node * 2, l, mid);
    Build_seg(node * 2 + 1, mid + 1, r);
    seg[node] = seg[node<<1] + seg[node<<1|1];
    LCA[node]= getLCA(LCA[node<<1] , LCA[node<<1|1]);
    segLvl[node] = segLvl[node<<1] + segLvl[node<<1|1];// DONT FORGET BUILD IN MAIN YA 7OMAR
}
void update( int node , int l , int r , int s , int e )
{
    if ( l > e || r < s)
        return ;
    if(seg[node]==0)
        return;
    if (l == r) {
        LCA[node]= findKthAncestor(LCA[node],1);
        seg[node]=(LCA[node]!=1);
        segLvl[node]=lvl[LCA[node]];
        a[l]=LCA[node];
        return;
    }
    int md = l + r >> 1 ;
    update(node<<1,l,md,s,e),update(node<<1|1,md+1,r,s,e);
    seg[node] = seg[node<<1] + seg[node<<1|1];
    LCA[node]= getLCA(LCA[node<<1] , LCA[node<<1|1]);
    segLvl[node] = segLvl[node<<1] + segLvl[node<<1|1];// DONT FORGET BUILD IN MAIN YA 7OMAR

}
ll query(ll node,ll l ,ll r,ll st,ll en) {// DONT FORGET BUILD IN MAIN YA 7OMAR
    if(l>en || r<st){
        return 0;
    }
    if(l>=st && r<=en){
        return segLvl[node];
    }
    ll md= (l+r)/2 ;
    return (query(node*2,l,md,st,en)+query(node*2+1,md+1,r,st,en));// DONT FORGET BUILD IN MAIN YA 7OMAR
}
ll queryLCA(ll node,ll l ,ll r,ll st,ll en) {// DONT FORGET BUILD IN MAIN YA 7OMAR
    if(l>en || r<st){
        return 0;
    }
    if(l>=st && r<=en){
        return LCA[node];
    }
    ll md= (l+r)/2 ;
    ll f=queryLCA(node*2,l,md,st,en),s=queryLCA(node*2+1,md+1,r,st,en);
    if(f==0)return s;
    if(s==0)return f;
    return getLCA(f,s);// DONT FORGET BUILD IN MAIN YA 7OMAR
}
void func(int index) {
    ll n,q;cin>>n>>q;
    for (int i = 1; i <= n ; ++i) {
        cin>>a[i];
    }
    Build_seg(1,1,n);
    while (q--){
        ll t;cin>>t;
        if(t==1){
            ll st,en;cin>>st>>en;
            update(1,1,n,st,en);
        }else {
            ll st,en;cin>>st>>en;
            ll sum= query(1,1,n,st,en);
            ll lca= queryLCA(1,1,n,st,en);
            cout<<sum-lvl[lca]*(en-st+1)<<endl;
        }
    }
}




