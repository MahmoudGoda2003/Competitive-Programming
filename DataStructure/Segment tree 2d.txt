int t[501*4][501*4],n,m,a[501][501];
void build_y (int vx, int lx, int rx, int vy, int ly, int ry) {
    if (ly == ry)
        if (lx == rx)
            t[vx][vy] = a[lx][ly];
        else
            t[vx][vy] = t[vx*2][vy] + t[vx*2+1][vy];
    else {
        int my = (ly + ry) / 2;
        build_y (vx, lx, rx, vy*2, ly, my);
        build_y (vx, lx, rx, vy*2+1, my+1, ry);
        t[vx][vy] = t[vx][vy*2] + t[vx][vy*2+1];
    }
}

void build_x (int vx, int lx, int rx) {
    if (lx != rx) {
        int mx = (lx + rx) / 2;
        build_x (vx*2, lx, mx);
        build_x (vx*2+1, mx+1, rx);
    }
    build_y (vx, lx, rx, 1, 0, m-1);
}
int sum_y (int vx, int vy, int tly, int try_, int ly, int ry) {
    if (ly > ry)
        return 0;
    if (ly == tly && try_ == ry)
    {
        ll xxxx=t[vx][vy];
        return t[vx][vy];
    }
    int tmy = (tly + try_) / 2;
    return sum_y (vx, vy*2, tly, tmy, ly, min(ry,tmy))
           + sum_y (vx, vy*2+1, tmy+1, try_, max(ly,tmy+1), ry);
}

int sum_x (int vx, int tlx, int trx, int lx, int rx, int ly, int ry) {
    if (lx > rx)
        return 0;
    if (lx == tlx && trx == rx){
        ll xxx=sum_y (vx, 1, 0, m-1, ly, ry);
        return sum_y (vx, 1, 0, m-1, ly, ry);
    }
    int tmx = (tlx + trx) / 2;
    return sum_x (vx*2, tlx, tmx, lx, min(rx,tmx), ly, ry)
           + sum_x (vx*2+1, tmx+1, trx, max(lx,tmx+1), rx, ly, ry);
}
void update_y (int vx, int lx, int rx, int vy, int ly, int ry, int x, int y, int new_val) {
    if (ly == ry) {
        if (lx == rx)
            t[vx][vy] = new_val;
        else
            t[vx][vy] = t[vx*2][vy] + t[vx*2+1][vy];
    }
    else {
        int my = (ly + ry) / 2;
        if (y <= my)
            update_y (vx, lx, rx, vy*2, ly, my, x, y, new_val);
        else
            update_y (vx, lx, rx, vy*2+1, my+1, ry, x, y, new_val);
        t[vx][vy] = t[vx][vy*2] + t[vx][vy*2+1];
    }
}

void update_x (int vx, int lx, int rx, int x, int y, int new_val) {
    if (lx != rx) {
        int mx = (lx + rx) / 2;
        if (x <= mx)
            update_x (vx*2, lx, mx, x, y, new_val);
        else
            update_x (vx*2+1, mx+1, rx, x, y, new_val);
    }
    update_y (vx, lx, rx, 1, 0, m-1, x, y, new_val);
}
void func(int ind) {
    cin>>n>>m;
    fo(i,n){
        fo(j,m){
            cin>>a[i][j];
        }
    }
    build_x(1,0,n-1);
    cout<<sum_x(1,0,n-1,0,1,0,1)<<'\n';
}


/////////////////////////////////////////////

2d partial sum


    ll n, q, pre[1009][1009];
    cin >> n >> q;
    for(int i=1; i<=n; ++i) {
        for(int j=1; j<=n; ++j) {
            char x;
            cin >> x;
            pre[i][j]=pre[i][j-1]+pre[i-1][j]-pre[i-1][j-1];
            if(x=='*')
                ++pre[i][j];
        }
    }
    for(int i=0; i<q; ++i) {
        int x1,x2,x3,x4;
        cin >> x1>>x2>>x3>>x4;
        cout << pre[x3][x4]-pre[x3][x2-1]-pre[x1-1][x4]+pre[x1-1][x2-1];
        cout << endl;
    }
/////////////////////////////////////////////

2d sparse table

#include <bits/stdc++.h>
using namespace std;

const int MAXN = 1000;
const int MAXLOG = 10;

int n, m;
int a[MAXN][MAXN];
int st[MAXN][MAXN][MAXLOG][MAXLOG];

void build() {
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            st[i][j][0][0] = a[i][j];
        }
    }
    for(int k1 = 0; k1 < MAXLOG; k1++) {
        for(int k2 = 0; k2 < MAXLOG; k2++) {
            if(k1 == 0 && k2 == 0) continue;
            for(int i = 0; i + (1 << k1) <= n; i++) {
                for(int j = 0; j + (1 << k2) <= m; j++) {
                    if(k1 == 0) {
                        st[i][j][k1][k2] = max(st[i][j][k1][k2-1], st[i][j+(1<<(k2-1))][k1][k2-1]);
                    } else {
                        st[i][j][k1][k2] = max(st[i][j][k1-1][k2], st[i+(1<<(k1-1))][j][k1-1][k2]);
                        if(k2 > 0) {
                            st[i][j][k1][k2] = max(st[i][j][k1][k2], max(st[i][j+(1<<(k2-1))][k1][k2-1], st[i+(1<<(k1-1))][j+(1<<(k2-1))][k1-1][k2-1]));
                        }
                    }
                }
            }
        }
    }
}

int query(int x1, int y1, int x2, int y2) {
    int k1 = log2(x2-x1+1);
    int k2 = log2(y2-y1+1);
    int ans = max(st[x1][y1][k1][k2], st[x2-(1<<k1)+1][y1][k1][k2]);
    ans = max(ans, max(st[x1][y2-(1<<k2)+1][k1][k2], st[x2-(1<<k1)+1][y2-(1<<k2)+1][k1][k2]));
    return ans;
}

int main() {
    cin >> n >> m;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cin >> a[i][j];
        }
    }
    build();
    int q;
    cin >> q;
    while(q--) {
        int x1, y1, x2, y2;
        cin >> x1 >> y1 >> x2 >> y2;
        int ans = query(x1, y1, x2, y2);
        cout << ans << endl;
    }
    return 0;
}