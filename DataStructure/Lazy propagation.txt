ll seg[N<<2], a[N], lazy[N<<2];
ll num,q;
void build( int node , int l , int r)
{
    lazy[node]=0;
    if( l == r)
   {
       seg[node]=a[l];
       return ;
   }
    int md = l + r >> 1 ;
    build(node<<1,l,md),build(node<<1|1,md+1,r);
    seg[node] = seg[node<<1] + seg[node<<1|1];
}

void propagate( int node , int l , int r )
{
    if(lazy[node] == 0)
        return;
    seg[node] += lazy[node] * (r- l + 1);
    if(l != r) {
        lazy[node << 1] += lazy[node];
        lazy[node << 1 | 1] += lazy[node];
    }
    lazy[node] = 0;
}

void update( int node , int l , int r , int s , int e , int val)
{
    propagate(node,l,r);
    if ( l > e || r < s)
        return ;
    if ( l >= s and r <= e)
    {
        lazy[node] = val;
        propagate( node , l, r);
        return;
    }
    int md = l + r >> 1 ;
    update(node<<1,l,md,s,e,val),update(node<<1|1,md+1,r,s,e,val);
    seg[node] = seg[node<<1] + seg[node<<1|1];
}

ll query( int node , int l , int r , int s , int e)
{
    propagate(node,l,r);
    if ( l > e || r < s)
        return 0;
    if ( l >= s and r <= e)
        return seg[node];
    int md = l + r >> 1 ;
    return query(node<<1,l,md,s,e)+query(node<<1|1,md+1,r,s,e);
}

////////////////////////////////////////////////////////////////

///custom propagate/// Polynomial 

ll seg[N<<2], a[N], lazy[N<<2],counter[N<<2];
void build( int node , int l , int r)
{
    lazy[node]=0;
    counter[node]=0;
    if( l == r)
    {
        seg[node]=a[l];
        return ;
    }
    int md = l + r >> 1 ;
    build(node<<1,l,md),build(node<<1|1,md+1,r);
    seg[node] = seg[node<<1] + seg[node<<1|1];
}

void propagate( int node , int l , int r )
{
    if(lazy[node] == 0)
        return;
    ll n=r-l+1;
    ll start=lazy[node]-(r-l)*counter[node];
    ll c=counter[node]*(n-1)+2*start;
    ll nn=n*(2*start+(n-1)*counter[node])/2;
    seg[node] +=n*(2*start+(n-1)*counter[node])/2;
    if(l != r) {
        int md = l + r >> 1 ;
        lazy[node << 1] += lazy[node]-(r-md)*counter[node];
        lazy[node << 1 | 1] += lazy[node];
        counter[node<<1]+=counter[node];
        counter[node<<1|1]+=counter[node];
    }
    counter[node]=0;
    lazy[node] = 0;
}

void update( int node , int l , int r , int s , int e , int val)
{
    propagate(node,l,r);

    if ( l > e || r < s)
        return ;
    if ( l >= s and r <= e)
    {
        lazy[node] += val-(e-r);
        counter[node]++;
        propagate( node , l, r);
        return;
    }
    int md = l + r >> 1 ;
    update(node<<1,l,md,s,e,val),update(node<<1|1,md+1,r,s,e,val);
    seg[node] = seg[node<<1] + seg[node<<1|1];
}
ll query( int node , int l , int r , int s , int e)
{
    propagate(node,l,r);
    if ( l > e || r < s)
        return 0;
    if ( l >= s and r <= e)
        return seg[node];
    int md = l + r >> 1 ;
    return query(node<<1,l,md,s,e)+query(node<<1|1,md+1,r,s,e);
}

void func(int ind) {
    ll n,q;cin>>n>>q;
    fp(i,1,n)cin>>a[i];
    build(1,1,n);
    while (q--){
        ll t;cin>>t;
        if(t==1){
            ll u,v;cin>>u>>v;
            update(1,1,n,u,v,v-u+1);
        }else{
            ll u,v;cin>>u>>v;
            cout<<query(1,1,n,u,v)<<'\n';
        }
    }
//    fp(i,1,n)cout<<query(1,1,n,i,i)<<'\n';
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////
multiple update types 1)add 2)assign

https://cses.fi/problemset/hack/1735/list/


ll seg[N<<2], a[N], lazy[N<<2];
ll type[N<<2];
void build( int node , int l , int r)
{
    lazy[node]=0;
    type[node]=0;
    if( l == r)
    {
        seg[node]=a[l];
        return ;
    }
    int md = l + r >> 1 ;
    build(node<<1,l,md),build(node<<1|1,md+1,r);
    seg[node] = seg[node<<1] + seg[node<<1|1];
}

void propagate( int node , int l , int r )
{
    if(lazy[node] == 0)
        return;
    if(type[node]==1){
        seg[node] += lazy[node] * (r- l + 1);
    }else{
        seg[node] = lazy[node] * (r- l + 1);
    }
    if(l != r) {
        ll md=(l+r)/2;
        if(type[node]==1){
            if(type[node<<1]==2) {
                propagate(node<<1,l,md);
                lazy[node << 1] = lazy[node];
            }else{
                lazy[node << 1] += lazy[node];
            }
            if(type[node<<1|1]==2){
                propagate(node<<1|1,md+1,r);
                lazy[node << 1 | 1] = lazy[node];
            }else{
                lazy[node << 1 | 1] += lazy[node];
            }
            type[node<<1]=1;
            type[node<<1|1]=1;
        }else{
            lazy[node << 1] = lazy[node];
            lazy[node << 1 | 1] = lazy[node];
            type[node<<1]=2;
            type[node<<1|1]=2;
        }
    }else a[l]=seg[node];
    lazy[node] = 0;
    type[node]=0;
}

void update( int node , int l , int r , int s , int e , int val)//add
{
    propagate(node,l,r);
    if ( l > e || r < s)
        return ;
    if ( l >= s and r <= e)
    {
        lazy[node] = val;
        type[node]=1;
        propagate( node , l, r);
        return;
    }
    int md = l + r >> 1 ;
    update(node<<1,l,md,s,e,val),update(node<<1|1,md+1,r,s,e,val);
    seg[node] = seg[node<<1] + seg[node<<1|1];
}
void update2( int node , int l , int r , int s , int e , int val)// assign
{
    propagate(node,l,r);
    if ( l > e || r < s)
        return ;
    if ( l >= s and r <= e)
    {
        lazy[node] = val;
        type[node]=2;
        propagate( node , l, r);
        return;
    }
    int md = l + r >> 1 ;
    update2(node<<1,l,md,s,e,val),update2(node<<1|1,md+1,r,s,e,val);
    seg[node] = seg[node<<1] + seg[node<<1|1];
}

ll query( int node , int l , int r , int s , int e)
{
    propagate(node,l,r);
    if ( l > e || r < s)
        return 0;
    if ( l >= s and r <= e)
        return seg[node];
    int md = l + r >> 1 ;
    return query(node<<1,l,md,s,e)+query(node<<1|1,md+1,r,s,e);
}