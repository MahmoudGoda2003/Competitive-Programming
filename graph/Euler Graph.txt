//Euler circuit undirected

vector<int> vis(N,0);
vector < pair < int , int > > g[N];
vector < int > ans;
void dfs( int node)
{
    while(!g[node].empty())
    {
        int v = g[node].back().first;
        int idx = g[node].back().second;
        g[node].pop_back();
        if(vis[idx])
            continue;
        vis[idx] = 1 ;
        dfs(v);
    }
    ans.push_back(node);
}
void func(int index)
{
    int n , m ;
    cin >> n >> m;
    for ( int i = 0 ; i < m ; i++)
    {
        int u, v;
        cin >> u >> v;
        g[u].push_back({v,i});
        g[v].push_back({u,i});
    }
    for ( int i = 1; i <= n ; i++)
    {
        if(g[i].size() % 2 == 1)
        {
            cout << "IMPOSSIBLE\n";
            return;
        }
    }
    dfs(1);
    if(ans.size() != m+1)
    {
        cout << "IMPOSSIBLE\n";
        return;
    }
    for ( int i = m ; i >= 0 ; i--)
        cout << ans[i] << ' ';
    cout << '\n';
}
\\\\\ Euler circuit for directed graph
vector<int> in(N), out(N);
vector < int > g[N];
vector < int > ans;
void dfs( int node)
{
    while(!g[node].empty())
    {
        int v = g[node].back();
        g[node].pop_back();
        dfs(v);
    }
    ans.push_back(node);
}
 void testCase()
{
    int n , m ;
    cin >> n >> m;
    for ( int i = 0 ; i < m ; i++)
    {
        int u, v;
        cin >> u >> v;
        g[u].push_back(v);
        out[u]++,in[v]++;
    }
    for ( int i = 0; i < n ; i++)
    {
        if(in[i] != out[i])
        {
            cout << "IMPOSSIBLE\n";
            return;
        }
    }
    dfs(1);
    if(ans.size() != m+1)
    {
        cout << "IMPOSSIBLE\n";
        return;
    }
    for ( int i = m ; i >= 0 ; i--)
        cout << ans[i] << ' ';
    cout << '\n';
}

//// semi Euler graph (euler path)

directed -->> 2 nodes one indeg=outdeg+1 and the other outdeg=indeg+1 all other indeg==outdeg

vector<int> in(N), out(N);
vector < int > g[N];
vector < int > ans;
void dfs( int node)
{
    while(!g[node].empty())
    {
        int v = g[node].back();
        g[node].pop_back();
        dfs(v);
    }
    ans.push_back(node);
}
 void testCase()
{
    int n , m ;
    cin >> n >> m;
    for ( int i = 0 ; i < m ; i++)
    {
        int u, v;
        cin >> u >> v;
        g[u].push_back(v);
        out[u]++,in[v]++;
    }
    for ( int i = 2; i < n ; i++)
    {
        if(in[i] != out[i])
        {
            cout << "IMPOSSIBLE\n";
            return;
        }
    }
    if(out[1] != in[1]+1 || in[n] != out[n]+1)
    {
        cout << "IMPOSSIBLE\n";
        return;
    }
    dfs(1);
    if(ans.size() != m+1)
    {
        cout << "IMPOSSIBLE\n";
        return;
    }
    for ( int i = m ; i >= 0 ; i--)
        cout << ans[i] << ' ';
    cout << '\n';
}

undirected-->>  2 nodes all of them has even degree but 2 have odd degree
De Bruijn Sequence problem -->https://cses.fi/problemset/task/1692

//he number of distinct de Bruijn sequences B(k, n) is ((K!) pow (k pow (n-1)))/(k pow(n))

//the result length is --> k^n +n-1 ---( n is the length of needed string)&k is the #of outdeg for each node if we used binary it will be 2 if we use alpha it will be 26

//time is --> O(k^n)

ll fop( ll b , ll p)
{
    if(!p)
        return 1;
    ll temp = fop(b,p/2);
    temp = (temp*temp);
    if(p&1)
        temp =(temp*b);
    return temp;
}
set<string> done;// we can convert it to unordered set
vector<int> edges;
void DFS(string node, string&st)
{
    for (int i = 0; i < st.size(); ++i)
    {
        string cur = node+st[i];
        if (done.find(cur) == done.end())
        {
            done.insert(cur);
            DFS(cur.substr(1), st);
            edges.push_back(i);
        }
    }
}
string deBruijn(int n, string& st)
{
    done.clear(); edges.clear();

    string startingNode = string (n-1, st[0]);
    DFS(startingNode, st);
    string res;
    int len = fop(st.size(),n);
    for (int i = 0; i < len; ++i)
        res += st[edges[i]];
    res += startingNode;
    return res;
}
void func(int index)
{
    int n; cin >> n;
    string st = "01";// changable due to the main sequence
    cout << deBruijn(n, st) << '\n';
}


