int N=1e5;

vector<int> par(N), sz(N);
bool iscyclic = false;
void init(int n)
{
    for ( int i = 1 ; i <= n ;i++)
        par[i] = i , sz[i] = 1;
}
// O(n) ---> O(n ^ 2)
int findparent( int u)
{
    if(par[u] == u)
        return  u;
    return par[u] = findparent(par[u]);
}

void connect( int u , int v)
{
    u = findparent(u);
    v = findparent(v);
    if ( u == v)
    {
        iscyclic =true;
        return;
    }
    if(sz[v] < sz[u])
        par[v] = u ,sz[u] += sz[v];
    else
        par[u] = v,sz[v] += sz[u];
}
bool isconnected( int u , int v)
{
    return (findparent(u) == findparent(v));
}

// Kruskal`s algoritm to get the minimum spining trees from undirected weighted graph

    vector<pair<ll,pair<ll,ll>>> vec;
    for ( ll i = 0 ; i < n;  i++)
    {
       	ll u,v,k;cin>>u>>v>>k;
        vec.pb({k,{u,v}});
    }
    sort(vec.begin(),vec.end());
    ll ans=0;
    for(int i=0;i<n;i++)
	{
		ll u=vec[i].second.first,v=vec[i].second.second;
		if(isconnected(u,v))
			continue;
		ans+=vec[i].first;
		connect(u,v);	
				
	}
//////////////////////////////////////////////////////////////////////////////


// to handle roll back we need to save changes in stack to retrieve it

// and remove path compression
struct DSU{
    vector<int> par, sz;
    stack<pair<int,int>>rB;// node ,parent
    ll comp=0;
    void init(int n)
    {
        par.resize(n+1);
        sz.resize(n+1);
        comp=n;
        while (rB.size())rB.pop();
        for ( int i = 1 ; i <= n ;i++)
            par[i] = i , sz[i] = 1;
    }
    int findparent( int u)
    {
        if(par[u] == u)
            return  u;
        return  findparent(par[u]);
    }
    void connect( int u , int v)
    {
        u = findparent(u);
        v = findparent(v);
        if ( u == v)
        {
            return;
        }
        comp--;
        if(sz[v] < sz[u])
        {
            rB.push({v,par[v]});
            par[v] = u ,sz[u] += sz[v];
        }
        else
        {
            rB.push({u,par[u]});
            par[u] = v,sz[v] += sz[u];
        }
    }
    void addCheck(){
        rB.push({-1,-1});
    }
    void roll_back(){
        if(rB.empty())
            return ;
        auto item=rB.top();
        while (item.first!=-1) {
            rB.pop();
            par[item.first] = item.second;
            comp++;
            if(rB.empty())break;
            item=rB.top();
        }
        if(rB.size()){
            rB.pop();
        }
        return ;
    }

};


/////////////////////////////////////////////////////////////////////////////

// if we work on removed edges we work on reversed queries --> step1 -> (D,E) problems



//////////////////////////////////////////////////////////////////////////////////

// to handle The bipartition test

//https://codeforces.com/edu/course/2/lesson/7/2/practice/contest/289391/problem/I

vector<int> par(N);
vector<int > sz(N);
vector<int>len(N);
vector<int>isBipar(N);
void init(int n)
{
    for ( int i = 0 ; i <= n ;i++)
        par[i] = i , sz[i]=isBipar[i] =1, len[i]= 0;
}
pair<int,int> findparent( int u)
{
    if(par[u] == u)
        return  {u,0};
    auto val=findparent(par[u]);
    par[u] = val.first;
    len[u]=(val.second+len[u])%2;
    return {par[u],len[u]};
}
void connect( int u , int v)
{
    auto valU= findparent(u),valV=findparent(v);
    u = valU.first;
    v = valV.first;
    if ( u == v)
    {
        if(valU.second==valV.second){
            isBipar[u]=0;
        }
        return;
    }
    if(sz[v] < sz[u])
    {
        isBipar[u]=min(isBipar[u],isBipar[v]);
        par[v] = u,len[v]=(1+valV.second+valU.second)%2 ,sz[u] += sz[v];
    }
    else
    {
        isBipar[v]=min(isBipar[u],isBipar[v]);
        par[u] = v,len[u]=(1+valV.second+valU.second)%2,sz[v] += sz[u];
    }
}
bool isconnected( int u , int v)
{
    return (findparent(u) == findparent(v));
}
void func(int index) {
    ll n,m;cin>>n>>m;
    init(n);
    ll shift=0;
    for (int i = 0; i < m; ++i) {
        ll t,a,b;cin>>t>>a>>b;
        if(t==0){
            connect((a+shift)%n,(b+shift)%n);
        }else{
            findparent((a+shift)%n);
            findparent((b+shift)%n);
            if(  len[(a+shift)%n]%2==len[(b+shift)%n]%2){
                cout<<"YES\n";
                shift=(shift+1)%n;
            }else cout<<"NO\n";
        }
    }
}




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



// handle DSU with LCA

// https://cses.fi/problemset/task/2101/



vector<pair<int,int>> par(N);
vector<int>sz(N);
void init(int n)
{
    for ( int i = 1 ; i <= n ;i++)
        par[i] = {i,0} , sz[i] = 1;
}
int findparent( int u)
{
    if(par[u].first == u)
        return  u;
    return findparent(par[u].first);
}

void connect( int u , int v,int sec)
{
    u = findparent(u);
    v = findparent(v);
    if ( u == v)
    {
        return;
    }
    if(sz[v] < sz[u])
        par[v].first = u ,par[v].second=sec,sz[u] += sz[v];
    else
        par[u].first = v,par[u].second=sec,sz[v] += sz[u];
}
int n , ancestor[N][M], lvl[N],sp[N][M];
vector < pair<int,int> > g[N];
void dfs( int node , int par,int cost)
{
    lvl[node] = lvl[par] + 1;
    ancestor[node][0] = par;
    sp[node][0]=cost;
    for ( int j = 1 ; j < M ; j++)
    {
        int p = ancestor[node][j-1];
        ancestor[node][j] = ancestor[p][j-1];
        sp[node][j] = max(sp[node][j-1], sp[p][j-1]);
    }
    for(auto ch : g[node])
    {
        if(ch.first == par)
            continue;
        dfs(ch.first,node,ch.second);
    }
}
int findKthAncestor( int u , int k)
{
    for ( int j = M-1 ; j >= 0 ; j--)
        if(k&(1<<j))
            u = ancestor[u][j];
    return u;
}
int getLCA( int u , int v)
{
    if(lvl[u] < lvl[v])
        swap(u,v);
    u = findKthAncestor(u,lvl[u]-lvl[v]);
    if ( u == v)
        return u;
    for ( int i = M-1 ; i>= 0 ;i--)
    {
        if(ancestor[u][i] == ancestor[v][i])
            continue;
        u = ancestor[u][i];
        v = ancestor[v][i];
    }
    return ancestor[u][0];
}


int maxi(int u,int k,int v,int c)
{
    int ma=0;
    for ( int i = M-1 ;i>= 0 ;i--){
        if((1<<i) <= k){
            k -= (1<<i);
            ma=max(ma,sp[u][i]);
            u=findKthAncestor(u,1<<i);
        }
        if((1<<i) <= c){
            c -= (1<<i);
            ma=max(ma,sp[v][i]);
            v=findKthAncestor(v,1<<i);
        }
    }
    return ma;
}

int test(int u,int v){
    int md=getLCA(u,v);
    int lv1=lvl[u]-lvl[md],lv2=lvl[v]-lvl[md];
    return maxi(u,lv1,v,lv2);
}

void func(int index) {
    int m,q;cin>>n>>m>>q;
    init(n);
    for (int i = 1; i <= m; ++i) {
        ll u,v;cin>>u>>v;
        connect(u,v,i);
    }
    set<int>comp;
    for (int i = 1; i <= n ; ++i) {
        if(par[i].first!=i){
            g[par[i].first].push_back({i,par[i].second});
        }
        comp.insert(findparent(i));
    }
    for(auto item:comp){
        dfs(item,0,0);
    }
    for (int i = 0; i < q; ++i) {
        ll u,v;cin>>u>>v;
        if(findparent(u) != findparent(v)){
            cout<<"-1\n";
        }else {
            cout<<test(u,v)<<'\n';
        }
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// to handle mo with DSU remove Path comperssion


///   هذا الحل من وحي خيال المؤلف واي تشابه بينه و بين اي حل اخر ما هو الا محض الصدفة

int  siz=555;
struct query {
    int l, r, idx;
};
bool cmp(query &a, query &b) {
    if (a.l / siz != b.l / siz)
        return a.l / siz < b.l / siz;
    return a.r < b.r;
}

struct DSU{
    vector<int> par, sz;
    stack<pair<int,int>>rB;// node ,parent
    ll comp=0;
    void init(int n)
    {
        par.resize(n+1);
        sz.resize(n+1);
        comp=n;
        while (rB.size())rB.pop();
        for ( int i = 1 ; i <= n ;i++)
            par[i] = i , sz[i] = 1;
    }
    int findparent( int u)
    {
        if(par[u] == u)
            return  u;
        return  findparent(par[u]);
    }
    void connect( int u , int v)
    {
        u = findparent(u);
        v = findparent(v);
        if ( u == v)
        {
            return;
        }
        comp--;
        if(sz[v] < sz[u])
        {
            rB.push({v,par[v]});
            par[v] = u ,sz[u] += sz[v];
        }
        else
        {
            rB.push({u,par[u]});
            par[u] = v,sz[v] += sz[u];
        }
    }
    void addCheck(){
        rB.push({-1,-1});
    }
    void roll_back(){
        if(rB.empty())
            return ;
        auto item=rB.top();
        while (item.first!=-1) {
            rB.pop();
            par[item.first] = item.second;
            comp++;
            if(rB.empty())break;
            item=rB.top();
        }
        if(rB.size()){
            rB.pop();
        }
        return ;
    }

};



void func(int index) {
    int n, q,m;
    cin >> n >> m;
    DSU dsu;
    dsu.init(n);
    // sz = (int) sqrt(n) + 1;
    vector<pair<int,int>>edges(m);
    for (int i = 0; i < m; ++i) {
        cin>>edges[i].first>>edges[i].second;
    }
    cin>>q;
    vector<query> v;
    v=vector<query>(q);
    for (int i = 0; i < q; ++i) {
        cin >> v[i].l >> v[i].r;
        v[i].l--, v[i].r--;
        v[i].idx = i;
    }
    sort(v.begin(),v.end(), cmp);
    vector<ll> ans(q);
    int lastBlock = -1, lastR = -1;

    for (auto x: v) {
        ll tempL=x.l,tempR=x.r,idx=x.idx;
        ll lBlock=tempL/siz,rBlock=tempR/siz;
        if(lBlock!=lastBlock){
            dsu.init(n);
            lastR=(lBlock+1)*siz-1;
        }
        lastBlock=lBlock;
        if(rBlock==lBlock){
            dsu.addCheck();
            for (int i = tempL; i <= tempR ; ++i) {
                dsu.connect(edges[i].first,edges[i].second);
            }
            ans[idx]=dsu.comp;
            dsu.roll_back();
        }else{
            while (lastR<tempR){
                lastR++;
                dsu.connect(edges[lastR].first,edges[lastR].second);
            }
            dsu.addCheck();
            for (int i = tempL; i < (lBlock+1)*siz ; ++i) {
                dsu.connect(edges[i].first,edges[i].second);
            }
            ans[idx]=dsu.comp;
            dsu.roll_back();
        }
    }
    for (int i = 0; i < q; ++i) {
        cout << ans[i] << '\n';
    }
}
signed main() {
//    freopen("lcm.in","rt",stdin);
    //freopen("output.txt","wt",stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    ll t=1;
//    cin>>t;
    ll index=1;
    while (t--){
        func(index++);
    }
    return 0;
}