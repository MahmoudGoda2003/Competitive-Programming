int N=10e5;

vector<int> par(N), sz(N);

void init(int n)
{
    for ( int i = 1 ; i <= n ;i++)
        par[i] = i , sz[i] = 1;
}
// O(n) ---> O(n ^ 2)
int findparent( int u)
{
    if(par[u] == u)
        return  u;
    return par[u] = findparent(par[u]);
}
bool iscyclic = false;
void connect( int u , int v)
{
    u = findparent(u);
    v = findparent(v);
    if ( u == v)
    {
        iscyclic =true;
        return;
    }
    if(sz[v] < sz[u])
        par[v] = u ,sz[u] += sz[v];
    else
        par[u] = v,sz[v] += sz[u];
}
bool isconnected( int u , int v)
{
    return (findparent(u) == findparent(v));
}

// Kruskal`s algoritm to get the minimum spining trees from undirected weighted graph

    vector<pair<ll,pair<ll,ll>>> vec;
    for ( ll i = 0 ; i < n;  i++)
    {
       	ll u,v,k;cin>>u>>v>>k;
        vec.pb({k,{u,v}});
    }
    sort(vec.begin(),vec.end());
    ll ans=0;
    for(int i=0;i<n;i++)
	{
		ll u=vec[i].second.first,v=vec[i].second.second;
		if(isconnected(u,v))
			continue;
		ans+=vec[i].first;
		connect(u,v);	
				
	}

