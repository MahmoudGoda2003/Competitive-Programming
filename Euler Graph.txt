//Euler circuit undirected

int vis[N] , deg[N];
vector < pair < int , int > > g[N];
vector < int > ans;
void dfs( int node)
{
  while(!g[node].empty())
    {
        int v = g[node].back().F;
        int idx = g[node].back().S;
        g[node].pop_back();
        if(vis[idx])
            continue;
        vis[idx] = 1 ;
        dfs(v);
    }
    ans.push_back(node);
}
 void testCase()
{
    int n , m ;
    cin >> n >> m;
    for ( int i = 0 ; i < m ; i++)
    {
        int u, v;
        cin >> u >> v;
        g[u].push_back({v,i});
        g[v].push_back({u,i});
        deg[u]++,deg[v]++;
    }
    for ( int i = 1; i <= n ; i++)
    {
        if(deg[i] % 2 == 1)
        {
            cout << "IMPOSSIBLE\n";
            return;
        }
    }
    dfs(1);
    if(ans.size() != m+1)
    {
        cout << "IMPOSSIBLE\n";
        return;
    }
    for ( int i = m ; i >= 0 ; i--)
        cout << ans[i] << ' ';
    cout << '\n';
}
\\\\\ Euler circuit for directed graph
int in[N], out[N];
vector < int > g[N];
vector < int > ans;
void dfs( int node)
{
    while(!g[node].empty())
    {
        int v = g[node].back();
        g[node].pop_back();
        dfs(v);
    }
    ans.push_back(node);
}
 void testCase()
{
    int n , m ;
    cin >> n >> m;
    for ( int i = 0 ; i < m ; i++)
    {
        int u, v;
        cin >> u >> v;
        g[u].push_back(v);
        out[u]++,in[v]++;
    }
    for ( int i = 0; i < n ; i++)
    {
        if(in[i] != out[i])
        {
            cout << "IMPOSSIBLE\n";
            return;
        }
    }
    dfs(1);
    if(ans.size() != m+1)
    {
        cout << "IMPOSSIBLE\n";
        return;
    }
    for ( int i = m ; i >= 0 ; i--)
        cout << ans[i] << ' ';
    cout << '\n';
}

//// semi Euler graph (euler cycle)

directed -->> 2 nodes one indeg=outdeg+1 and the other outdeg=indeg+1 all other indeg==outdeg

int in[N], out[N];
vector < int > g[N];
vector < int > ans;
void dfs( int node)
{
    while(!g[node].empty())
    {
        int v = g[node].back();
        g[node].pop_back();
        dfs(v);
    }
    ans.push_back(node);
}
 void testCase()
{
    int n , m ;
    cin >> n >> m;
    for ( int i = 0 ; i < m ; i++)
    {
        int u, v;
        cin >> u >> v;
        g[u].push_back(v);
        out[u]++,in[v]++;
    }
    for ( int i = 2; i < n ; i++)
    {
        if(in[i] != out[i])
        {
            cout << "IMPOSSIBLE\n";
            return;
        }
    }
    if(out[1] != in[1]+1 || in[n] != out[n]+1)
    {
        cout << "IMPOSSIBLE\n";
        return;
    }
    dfs(1);
    if(ans.size() != m+1)
    {
        cout << "IMPOSSIBLE\n";
        return;
    }
    for ( int i = m ; i >= 0 ; i--)
        cout << ans[i] << ' ';
    cout << '\n';
}

undirected-->>2 nodes all of them has even degree but 2 have odd degree